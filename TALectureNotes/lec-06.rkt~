#lang racket
(require racket/trace)

;; We saw an interpreter for the Œª calculus last class,


(define val-of
  (Œª (e env)
    (match e
      (`,n #:when (number? n) n)
      (`(+ ,e1 ,e2)
       (+ (val-of e1 env)
          (val-of e2 env)))
      ; Lookup the symbol y in environment
      (`,y #:when (symbol? y) (env y))
      ; Return function
      (`(Œª (,x) ,body)
       #:when (symbol? x)
       (Œª (arg)
         ; We also need to extend the environment
         (val-of body
          (Œª (y)
            (cond
              ((eqv? y x) arg)
              (else (env y)))))))
      ; Application should apply and of course,
      ; natural recursion
      (`(,rator ,rand)
       ((val-of rator env) (val-of rand env))))))

;; In the above interpreter we represent the environment as
;; a function, but it can be represented by anything that can
;; associate variables to values. Every time we change the representation
;; of the environment we have to modify the interpreter even though
;; the logic around working with the environment doesn't change.
;; How do we get around this? We make the interpreter
;; representation independent (RI) with respect to environments.

;; We do this by "scooping like üç®" out the code that exposes that environment
;; is a function and replace it with a function call that performs the
;; same functionality.

;; RI w.r.t. environments using higher order functions
#|
(define val-of
  (Œª (e env)
    (match e
      (`,n #:when (number? n) n)
      (`(+ ,e1 ,e2)
       (+ (val-of e1 env)
          (val-of e2 env)))
      ; Lookup the symbol y in environment
      (`,y #:when (symbol? y)
           (apply-env env y))
      ; Return function
      (`(Œª (,x) ,body)
       #:when (symbol? x)
       (Œª (arg)
         ; We also need to extend the environment
         (val-of body (extend-env x arg env))))
      ; Application should apply and of course,
      ; natural recursion
      (`(,rator ,rand)
       ((val-of rator env) (val-of rand env))))))

;; We only have to  modify these helper functions when
;; we change the representation of environments.
(define apply-env
  (Œª (env y)
    (env y)))

(define extend-env
  (Œª (x arg env)
    (Œª (y)
      (cond
        ((eqv? y x) arg)
        (else
         (apply-env env y))))))

(define empty-env
  (Œª ()
    (Œª (y)
      (error 'val-of "unbound ~a" y))))
|#


;; Evaluating a Œª expression gives us a Racket function.
;; Since Racket is lexically scoped (we'll come back to
;; this later), this Racket function carries its environment
;; with it i.e. it remembers the associations for variables at the
;; time of creating the function. Such a function that contains
;; an environment along with its formal and body
;; is also known as a closure.

;; Let us make closures representation independent as well
;; so that we can use closure representations that are not
;; Racket functions.

;; Representation Independence w.r.t. environments and closures
(define val-of
  (Œª (e env)
    (match e
      (`,n #:when (number? n) n)
      (`(+ ,e1 ,e2)
       (+ (val-of e1 env)
          (val-of e2 env)))
      ; Lookup the symbol y in environment
      (`,y #:when (symbol? y)
           (apply-env env y))
      ; Return function
      (`(Œª (,x) ,body)
       #:when (symbol? x)
       (make-closure x body env))
      ; Application should apply and of course,
      ; natural recursion
      (`(,rator ,rand)
       (apply-closure
        (val-of rator env)
        (val-of rand env))))))

#|
;; Helper functions that use higher order functions as
;; representation for environments and cloures.
;; (try uncommenting these)
(define apply-env
  (Œª (env y)
    (env y)))


(define extend-env
  (Œª (x arg env)
    (Œª (y)
      (cond
        ((eqv? y x) arg)
        (else (apply-env env y))))))

(define empty-env
  (Œª ()
    (Œª (y)
      (error "unbound variable ~a" y))))

(define apply-clos
  (Œª (rator rand)
    (rator rand)))

(define make-clos
  (Œª (x body env)
    (Œª (arg)
      (val-of body (extend-env x arg env)))))

(val-of '(((Œª (a) (Œª (b) b)) 5) 6) (empty-env))
|#

;; Now that we have made both environments and closures RI,
;; we can swap out the old helper functions for environments
;; and closures with new ones that use tagged list representation
;; without changing the previous val-of function.

;; Tagged lists are lists whose car is always a symbol that
;; we call the tag of the list.


;; Helper functions that use tagged lists as
;; representation for environments and cloures.
;; (If you uncomment the higher order function representation
;; helper functions, then comment this set of helper functions)
(define apply-env
  (Œª (env y)
    (match env
      (`(empty-env)
       (error 'val-of "unbound ~a" y))
      (`(extend-env ,x ,arg ,env)
       (cond
         ((eqv? y x) arg)
         (else
          ;; env is bound to pattern variable and
          ;; not to formal.
          (apply-env env y))))
      #;(_ (env y))))) ; ‚Üê start with this, comment at end.

(define extend-env
  (Œª (x arg env)
    `(extend-env ,x ,arg ,env)))

(define empty-env
  (Œª ()
    `(empty-env)))

(define apply-closure
  (Œª (clos arg)
    (match clos
      (`(make-closure ,x ,body ,env)
       (val-of body (extend-env x arg env)))
      #;(_ (clos arg)))))

(define make-closure
  (Œª (x body env)
    `(make-closure ,x ,body ,env)))

(trace val-of)


#;
(val-of 'y (empty-env))
(val-of '(((Œª (w) (Œª (z) (+ 5 (+ w z)))) 1) 2)
          (empty-env))

(val-of 'y (extend-env 'y 10 (empty-env)))

;; One major advantage of using tagged lists as a
;; representation is that the environments and closures
;; look like composed function calls in the trace rather
;; than opaque Racket procedures.

;; You can swap between the two representations by uncommenting
;; one set of helper functions and commenting the other set
;; of helper functions.
