#lang racket
(require "mk-new.rkt")


(defrel (∈ Γ x τ)
  (fresh (x^ τ^ Γ^)
         (conj (== Γ `((,x^ . ,τ^) . ,Γ^))
               (disj (conj (== x x^)
                           (== τ τ^))
                     (conj (=/= x x^)
                           (∈ Γ^ x τ))))))
(defrel (!- Γ e τ)
  (disj
   (conj (numbero e)
         (== τ 'Nat))
   (conj (disj (== e #f)
               (== e #t))
         (== τ 'Bool))
   (conj (symbolo e)
         (∈ Γ e τ))
   (fresh (e1)
          (conj (== `(not ,e1) e)
                (== 'Bool τ)
                (!- Γ e1 'Bool)))
   (fresh (e1 e2)
          (conj (== `(and ,e1 ,e2) e)
                (== 'Bool τ)
                (!- Γ e1 'Bool)
                (!- Γ e2 'Bool)))
   (fresh (e1 e2 e11 e22)
          (conj (== `(cons ,e1 ,e2) e)
                (== `(pairof ,e11 ,e22) τ)
                (!- Γ e1 e11)
                (!- Γ e2 e22)))
   (fresh (p a d)
          (conj (== `(car ,p) e)
                (== τ a)
                (!- Γ p `(pairof ,a ,d))))
   (fresh (p a d)
          (conj (== `(cdr ,p) e)
                (== τ d)
                (!- Γ p `(pairof ,a ,d))))
   (fresh (e1 e2)
          (conj (== `(* ,e1 ,e2) e)
                (== 'Nat τ)
                (!- Γ e1 'Nat)
                (!- Γ e2 'Nat)))
   (fresh (e1 e2)
          (conj (== `(+ ,e1 ,e2) e)
                (== 'Nat τ)
                (!- Γ e1 'Nat)
                (!- Γ e2 'Nat)))
   (fresh (test conseq alt)
          (conj (== `(if ,test ,conseq ,alt) e)
                (!- Γ test 'Bool)
                (!- Γ conseq τ)
                (!- Γ alt τ)))
   (fresh (e1)
          (conj (== `(zero? ,e1) e)
                (== 'Bool τ)
                (!- Γ e1 'Nat)))
   (fresh (e1)
          (conj (== `(sub1 ,e1) e)
                (== 'Nat τ)
                (!- Γ e1 'Nat)))
   (fresh (x body τx τbody)
          (conj (symbolo x)
                (== `(lambda (,x) ,body) e)
                (== `(,τx -> ,τbody) τ)
                (!- `((,x . ,τx) . ,Γ) body τbody)))
   (fresh (rator rand τx)
          (conj (== `(,rator ,rand) e)
                (!- Γ rator `(,τx -> ,τ))
                (!- Γ rand τx)))
   (fresh (τ^ τ^^ f)
          (conj (== `(fix ,f) e)
                (== `(,τ^ -> ,τ^^) τ)
                (!- Γ f `((,τ^ -> ,τ^^) -> (,τ^ -> ,τ^^)))))))

;(run*! q (!- '() #t q)) Already worked?
;(run*! q (!- '() 17 q)) Already worked?
;(run*! q (!- '() '(zero? 24) q)) Already worked
;(run*! q (!- '() '(zero? (sub1 24)) q)) Already worked
;(run*! q (!- '() '(not (zero? (sub1 24))) q))
;(run*! q
;    (!- '() '(zero? (sub1 (sub1 18))) q))
;(run*! q
;    (!- '()  '(lambda (n) (if (zero? n) n n)) q))
;(run*! q (!- '() '(cons (zero? 1) (zero? 0)) q))
;(run* q (!- '() '(cons (zero? 1) (cons (zero? 1) (zero? 0))) q))
;(run* t (!- '() '(lambda (x) (cons x x)) t))
;(run* t (!- '() '(lambda (x) (lambda (y) (cons (zero? x) (+ x y)))) t))
;(length (car (run 500 q (!- '() q '(Nat -> Nat)))))
;(run*! q
;    (!- '() '(lambda (a) (lambda (x) (+ a x))) q))
;(run*! q (!- '() '(cons (zero? 1) (zero? 0)) q))
;((pairof Bool Bool))
;(run*! q (!- '() '(cons (zero? 1) (cons (zero? 1) (zero? 0))) q))
;((pairof Bool (pairof Bool Bool)))
;(run*! t (!- '() '(lambda (x) (cons x x)) t))
;((_0 -> (pairof _0 _0)))
;(run*! t (!- '() '(lambda (x) (lambda (y) (cons (zero? x) (+ x y)))) t))
;((Nat -> (Nat -> (pairof Bool Nat))))
;(run*! t (!- '() '((lambda (x) (zero? (car x))) (cons 0 1)) t))
;(Bool)
;(run*! t (!- '() '((lambda (x) (zero? (car x))) (cons 0 #f)) t))
;(Bool)
;(run*! t (!- '() '((lambda (x) (car x)) (cons (cons 0 0) #f)) t))
;((pairof Nat Nat))
;(run*! t (!- '() '((lambda (x) (zero? (car x))) (cons #f 0)) t))
;()
;(run*! t (!- '() '(lambda (x) (zero? (cdr x))) t))
;(((pairof _0 Nat) -> Bool))
;(run*! t (!- '() '((lambda (x) (zero? (cdr x))) (cons 0 1)) t))
;(Bool)
;(run*! t (!- '() '((lambda (x) (zero? (cdr x))) (cons 0 #f)) t))
;()
;(run*! t (!- '() '((lambda (x) (zero? (cdr x))) (cons #f 0)) t))
;(Bool)